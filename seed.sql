-- Drop tables
drop table if exists public.howtos;
drop table if exists public.events;
drop table if exists public.map_pins;
drop table if exists public.profiles;
drop table if exists public.user_types;
-- Drop types
drop type if exists public.how_to_difficulty;
drop type if exists public.how_to_duration;
drop type if exists public.user_roles;
-- Drop trigger and function
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists handle_new_user;
-- Create types
create type public.user_roles as enum ('user', 'admin');
create type public.how_to_difficulty as enum ('easy', 'medium', 'hard');
create type public.how_to_duration as enum ('short', 'medium', 'long');
-- Create tables
create table public.profiles (
	id uuid primary key references auth.users on delete cascade not null,
	email text not null,
	role public.user_roles not null default 'user',
	type text references public.user_types not null default 'default',
	display_name text not null default 'Display Name',
	description text not null default '',
	image text
);
create table public.howtos (
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	user_id uuid references public.profiles not null,
	title text not null,
	description text not null,
	image text not null,
	tags text [] not null,
	difficulty public.how_to_difficulty not null,
	duration public.how_to_duration not null,
	steps jsonb [] not null
);
create table public.events (
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	user_id uuid references public.profiles not null,
	title text not null,
	description text not null,
	image text not null,
	tags text [] not null,
	date timestamp with time zone not null,
	location text not null
);
create table public.map_pins (
	id uuid primary key references public.profiles on delete cascade not null,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	lng double precision not null,
	lat double precision not null
);
create table public.future_users (
	id bigint generated by default as identity primary key,
	email text not null,
	validation_code text not null
	hasUsedValidationCode boolean not null default 'false'
)
-- Create trigger and function
create function public.handle_new_user() returns trigger language plpgsql security definer
set search_path = public as $$ begin
insert into public.profiles (id, email, display_name)
values (
		new.id,
		new.email,
		new.raw_user_meta_data->>'display_name'
	);
return new;
end;
$$;
create trigger on_auth_user_created
after
insert on auth.users for each row execute procedure public.handle_new_user();